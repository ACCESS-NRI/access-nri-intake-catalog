[project]
name = "access_nri_intake"
authors = [
    { name = "ACCESS-NRI" },
]
description = "Intake catalog managed by ACCESS-NRI and associated tools"
readme = "README.rst"
requires-python = ">=3.10"
license = { text = "Apache-2.0" }
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]

dynamic = ["version"]

dependencies = [
    "cftime",
    "ecgtools-access>=2025.10.7",
    "frozendict",
    "intake>=2.0.0",
    "intake-dataframe-catalog>=0.3.1",
    "intake-esm-access",
    "jsonschema",
    "libcst",
    "pydantic<2.12",
    "polars>=1.24.0",
    "pooch",
    "xarray",
    "colorama",
    "yamanifest>=0.3.12",
    "access-py-telemetry>=0.1.6",
]

[project.optional-dependencies]
test = ["pytest", "tox"]
e2e = ["pytest", "pytest-ordering"]

[project.scripts]
catalog-build = "access_nri_intake.cli:build"
catalog-concretize = "access_nri_intake.cli:concretize"
metadata-validate = "access_nri_intake.cli:metadata_validate"
metadata-template = "access_nri_intake.cli:metadata_template"
build-esm-datastore = "access_nri_intake.cli:use_esm_datastore"
scaffold-catalog-entry = "access_nri_intake.cli:scaffold_catalog_entry"

[project.entry-points."intake.catalogs"]
access_nri = "access_nri_intake.data:data"

[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools >= 61.0.0",
  "versioneer[toml]",
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
access_nri_intake = [
    "data/catalog.yaml",
    "data/metadata_schema_experiment.json",
    "data/metadata_schema_file.json",
]

[tool.versioneer]
VCS = "git"
style = "pep440"
versionfile_source = "src/access_nri_intake/_version.py"
versionfile_build = "access_nri_intake/_version.py"
tag_prefix = "v"
parentdir_prefix = "access-nri-intake-"

[tool.coverage.run]
omit = [
    "*/_version.py",
    "*/data/__init__.py",
]

[tool.ruff]
target-version = "py310"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "versioneer.py",
]
# E402: module level import not at top of file
# E501: line too long - let black worry about that
ignore = [
    "E402",
    "E501",
]
select = [
    # Pyflakes
    "F",
    # Pycodestyle
    "E",
    "W",
    # isort
    "I",
    # Pyupgrade
    "UP",
]

[tool.ruff.mccabe]
max-complexity = 18

[tool.ruff.isort]
known-first-party = ["access_nri_intake"]

[tool.pixi.workspace]
channels = ["conda-forge","accessnri"]
platforms = ["osx-arm64", "linux-64", "win-64"]

[tool.pixi.environments]
default = { features = ["dev","py313"], solve-group = "default" }
test-py310 = { features = ["py310", "test"] }
test-py311 = { features = ["py311", "test"] }
test-py312 = { features = ["py312", "test"] }
test-py313 = { features = ["py313", "test"] }

[tool.pixi.feature.dev.pypi-dependencies]
access_nri_intake = { path = ".", editable = true }

[tool.pixi.feature.dev.dependencies]
pre-commit = ">=4.2.0,<5"

[tool.pixi.feature.dev.tasks]
ruff = { cmd = "ruff check src", description = "Run ruff checks" }
black = { cmd = "black src", description = "Format code with black" }
mypy = { cmd = "mypy src", description = "Run mypy type checks" }
mypy-setup = { cmd = "mypy --install-types", description = "Install mypy type stubs" }
pre-commit-install = { cmd = "pre-commit install", description = "Install pre-commit hooks" }
pre-commit = { cmd = "pre-commit run --all-files && pixi lock", description = "Run pre-commit hooks" }

[tool.pixi.feature.test.pypi-dependencies]
access_nri_intake = { path = ".", editable = false } 

[tool.pixi.feature.test.dependencies]
pytest = ">=8.4.1,<9"
pytest-ordering = ">=0.6,<0.7"
coverage = "*"

[tool.pixi.feature.test.tasks]
test = {cmd = "pytest tests", description = "Run tests"}
test-cov = {cmd = "coverage run -m --source=access_nri_intake pytest tests && coverage xml", description = "Run tests with coverage and generate xml report"}
test-e2e = {cmd = "pytest --e2e tests", description = "Run tests including e2e tests"}


[tool.pixi.feature.py310.dependencies]
python = "3.10.*"

[tool.pixi.feature.py311.dependencies]
python = "3.11.*"

[tool.pixi.feature.py312.dependencies]
python = "3.12.*"

[tool.pixi.feature.py313.dependencies]
python = "3.13.*"
